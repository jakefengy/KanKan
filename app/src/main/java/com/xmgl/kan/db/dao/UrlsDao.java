package com.xmgl.kan.db.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import com.xmgl.kan.db.entity.Urls;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.

/**
 * DAO for table "URLS".
*/
public class UrlsDao extends AbstractDao<Urls, String> {

    public static final String TABLENAME = "URLS";

    /**
     * Properties of entity Urls.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Url = new Property(0, String.class, "url", true, "URL");
        public final static Property Name = new Property(1, String.class, "name", false, "NAME");
        public final static Property Orgno = new Property(2, String.class, "orgno", false, "ORGNO");
        public final static Property Orgname = new Property(3, String.class, "orgname", false, "ORGNAME");
        public final static Property Intvalue = new Property(4, Integer.class, "intvalue", false, "INTVALUE");
        public final static Property Urlenable = new Property(5, Boolean.class, "urlenable", false, "URLENABLE");
    };

    private DaoSession daoSession;


    public UrlsDao(DaoConfig config) {
        super(config);
    }
    
    public UrlsDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
        this.daoSession = daoSession;
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"URLS\" (" + //
                "\"URL\" TEXT PRIMARY KEY NOT NULL ," + // 0: url
                "\"NAME\" TEXT," + // 1: name
                "\"ORGNO\" TEXT," + // 2: orgno
                "\"ORGNAME\" TEXT," + // 3: orgname
                "\"INTVALUE\" INTEGER," + // 4: intvalue
                "\"URLENABLE\" INTEGER);"); // 5: urlenable
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"URLS\"";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, Urls entity) {
        stmt.clearBindings();
 
        String url = entity.getUrl();
        if (url != null) {
            stmt.bindString(1, url);
        }
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(2, name);
        }
 
        String orgno = entity.getOrgno();
        if (orgno != null) {
            stmt.bindString(3, orgno);
        }
 
        String orgname = entity.getOrgname();
        if (orgname != null) {
            stmt.bindString(4, orgname);
        }
 
        Integer intvalue = entity.getIntvalue();
        if (intvalue != null) {
            stmt.bindLong(5, intvalue);
        }
 
        Boolean urlenable = entity.getUrlenable();
        if (urlenable != null) {
            stmt.bindLong(6, urlenable ? 1L: 0L);
        }
    }

    @Override
    protected void attachEntity(Urls entity) {
        super.attachEntity(entity);
        entity.__setDaoSession(daoSession);
    }

    /** @inheritdoc */
    @Override
    public String readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public Urls readEntity(Cursor cursor, int offset) {
        Urls entity = new Urls( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // url
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // name
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // orgno
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // orgname
            cursor.isNull(offset + 4) ? null : cursor.getInt(offset + 4), // intvalue
            cursor.isNull(offset + 5) ? null : cursor.getShort(offset + 5) != 0 // urlenable
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, Urls entity, int offset) {
        entity.setUrl(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setName(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setOrgno(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setOrgname(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setIntvalue(cursor.isNull(offset + 4) ? null : cursor.getInt(offset + 4));
        entity.setUrlenable(cursor.isNull(offset + 5) ? null : cursor.getShort(offset + 5) != 0);
     }
    
    /** @inheritdoc */
    @Override
    protected String updateKeyAfterInsert(Urls entity, long rowId) {
        return entity.getUrl();
    }
    
    /** @inheritdoc */
    @Override
    public String getKey(Urls entity) {
        if(entity != null) {
            return entity.getUrl();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
