package com.xmgl.kan.db.entity;

import com.xmgl.kan.db.dao.DaoSession;
import com.xmgl.kan.db.dao.UrlParamsDao;
import com.xmgl.kan.db.dao.UrlsDao;

import java.util.List;

import de.greenrobot.dao.DaoException;

// THIS CODE IS GENERATED BY greenDAO, EDIT ONLY INSIDE THE "KEEP"-SECTIONS

// KEEP INCLUDES - put your custom includes here
// KEEP INCLUDES END

/**
 * Entity mapped to table "URLS".
 */
public class Urls {

    private String url;
    private String name;
    private String orgno;
    private String orgname;
    private Integer intvalue;
    private Boolean urlenable = false;

    /** Used to resolve relations */
    private transient DaoSession daoSession;

    /** Used for active entity operations. */
    private transient UrlsDao myDao;

    private List<UrlParams> paramlist;

    // KEEP FIELDS - put your custom fields here
    // KEEP FIELDS END

    public Urls() {
    }

    public Urls(String url) {
        this.url = url;
    }

    public Urls(String url, String name, String orgno, String orgname, Integer intvalue, Boolean urlenable) {
        this.url = url;
        this.name = name;
        this.orgno = orgno;
        this.orgname = orgname;
        this.intvalue = intvalue;
        this.urlenable = urlenable;
    }

    /** called by internal mechanisms, do not call yourself. */
    public void __setDaoSession(DaoSession daoSession) {
        this.daoSession = daoSession;
        myDao = daoSession != null ? daoSession.getUrlsDao() : null;
    }

    public String getUrl() {
        return url;
    }

    public void setUrl(String url) {
        this.url = url;
    }

    public String getName() {
        return name;
    }

    public void setName(String name) {
        this.name = name;
    }

    public String getOrgno() {
        return orgno;
    }

    public void setOrgno(String orgno) {
        this.orgno = orgno;
    }

    public String getOrgname() {
        return orgname;
    }

    public void setOrgname(String orgname) {
        this.orgname = orgname;
    }

    public Integer getIntvalue() {
        return intvalue;
    }

    public void setIntvalue(Integer intvalue) {
        this.intvalue = intvalue;
    }

    public Boolean getUrlenable() {
        return urlenable;
    }

    public void setUrlenable(Boolean urlenable) {
        this.urlenable = urlenable;
    }

    /** To-many relationship, resolved on first access (and after reset). Changes to to-many relations are not persisted, make changes to the target entity. */
    public List<UrlParams> getParamlist() {
        if (paramlist == null) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            UrlParamsDao targetDao = daoSession.getUrlParamsDao();
            List<UrlParams> paramlistNew = targetDao._queryUrls_Paramlist(url);
            synchronized (this) {
                if(paramlist == null) {
                    paramlist = paramlistNew;
                }
            }
        }
        return paramlist;
    }

    /** Resets a to-many relationship, making the next get call to query for a fresh result. */
    public synchronized void resetParamlist() {
        paramlist = null;
    }

    /** Convenient call for {@link AbstractDao#delete(Object)}. Entity must attached to an entity context. */
    public void delete() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.delete(this);
    }

    /** Convenient call for {@link AbstractDao#update(Object)}. Entity must attached to an entity context. */
    public void update() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.update(this);
    }

    /** Convenient call for {@link AbstractDao#refresh(Object)}. Entity must attached to an entity context. */
    public void refresh() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.refresh(this);
    }

    // KEEP METHODS - put your custom methods here
    // KEEP METHODS END

}
