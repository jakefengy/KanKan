package com.xmgl.kan.db.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import com.xmgl.kan.db.entity.UrlParams;

import java.util.List;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;
import de.greenrobot.dao.query.Query;
import de.greenrobot.dao.query.QueryBuilder;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.

/**
 * DAO for table "URL_PARAMS".
*/
public class UrlParamsDao extends AbstractDao<UrlParams, Long> {

    public static final String TABLENAME = "URL_PARAMS";

    /**
     * Properties of entity UrlParams.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Url = new Property(1, String.class, "url", false, "URL");
        public final static Property Name = new Property(2, String.class, "name", false, "NAME");
        public final static Property Type = new Property(3, String.class, "type", false, "TYPE");
        public final static Property Required = new Property(4, Boolean.class, "required", false, "REQUIRED");
        public final static Property Rowid = new Property(5, String.class, "rowid", false, "ROWID");
        public final static Property Content = new Property(6, String.class, "content", false, "CONTENT");
    };

    private DaoSession daoSession;

    private Query<UrlParams> urls_ParamlistQuery;

    public UrlParamsDao(DaoConfig config) {
        super(config);
    }
    
    public UrlParamsDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
        this.daoSession = daoSession;
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"URL_PARAMS\" (" + //
                "\"_id\" INTEGER PRIMARY KEY ," + // 0: id
                "\"URL\" TEXT NOT NULL ," + // 1: url
                "\"NAME\" TEXT," + // 2: name
                "\"TYPE\" TEXT," + // 3: type
                "\"REQUIRED\" INTEGER," + // 4: required
                "\"ROWID\" TEXT," + // 5: rowid
                "\"CONTENT\" TEXT);"); // 6: content
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"URL_PARAMS\"";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, UrlParams entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindString(2, entity.getUrl());
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(3, name);
        }
 
        String type = entity.getType();
        if (type != null) {
            stmt.bindString(4, type);
        }
 
        Boolean required = entity.getRequired();
        if (required != null) {
            stmt.bindLong(5, required ? 1L: 0L);
        }
 
        String rowid = entity.getRowid();
        if (rowid != null) {
            stmt.bindString(6, rowid);
        }
 
        String content = entity.getContent();
        if (content != null) {
            stmt.bindString(7, content);
        }
    }

    @Override
    protected void attachEntity(UrlParams entity) {
        super.attachEntity(entity);
        entity.__setDaoSession(daoSession);
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public UrlParams readEntity(Cursor cursor, int offset) {
        UrlParams entity = new UrlParams( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.getString(offset + 1), // url
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // name
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // type
            cursor.isNull(offset + 4) ? null : cursor.getShort(offset + 4) != 0, // required
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // rowid
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6) // content
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, UrlParams entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setUrl(cursor.getString(offset + 1));
        entity.setName(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setType(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setRequired(cursor.isNull(offset + 4) ? null : cursor.getShort(offset + 4) != 0);
        entity.setRowid(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setContent(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(UrlParams entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(UrlParams entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
    /** Internal query to resolve the "paramlist" to-many relationship of Urls. */
    public List<UrlParams> _queryUrls_Paramlist(String url) {
        synchronized (this) {
            if (urls_ParamlistQuery == null) {
                QueryBuilder<UrlParams> queryBuilder = queryBuilder();
                queryBuilder.where(Properties.Url.eq(null));
                urls_ParamlistQuery = queryBuilder.build();
            }
        }
        Query<UrlParams> query = urls_ParamlistQuery.forCurrentThread();
        query.setParameter(0, url);
        return query.list();
    }

}
